name: Unit Test and Integration Tests
on:
  pull_request:    
    branches: [ master, develop ]  
  workflow_dispatch:
jobs:
  run:
    runs-on: ubuntu-latest
    env:
      config: 'Release'
      azureSubscriptionId: 6cfb8f33-6d4b-43bf-9000-91fd6f53ca28
 
    steps:
    - uses: actions/checkout@v2

    # azure login steps
    - name: azure login
      shell: pwsh
      env:
        clientId: ${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_ID }}
        clientSecret:  ${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_SECRET }}
        tenantId: ${{ secrets.AZURE_TENANT_ID }}
        sqlServerName: ${{ secrets.CI_SQLSERVERNAME }}
      run: |
        az login --service-principal -u $Env:clientId --password "$Env:clientSecret" --tenant $Env:tenantId
        az account set -s ${{ env.azureSubscriptionId }}

    # Create CI database
    - name: CI database
      shell: pwsh
      env:
        sqlServerName: ${{ secrets.CI_SQLSERVERNAME }}
      run: |
        # Get the Runners publics IP and add to allow-list on the SQL server
        $Ip = (Invoke-WebRequest -uri "http://ifconfig.me/ip").Content
        try {
          $ip = (Invoke-WebRequest -uri "http://ifconfig.me/ip").Content
          az sql server firewall-rule create `
              --name github-runner-ip `
              --resource-group rg-sepes-ci `
              --server $Env:sqlServerName `
              --start-ip-address $ip `
              --end-ip-address $ip
        }
        catch {
        }
        
        $pr = (Get-Content ${env:GITHUB_EVENT_PATH} | ConvertFrom-Json).number
        Write-Host "Pull request: $pr"
        $dbname = "db-sepes-ci-pr$pr"

        # Create new database for PR
        Import-Module ./scripts/createdatabase.ps1 -Force
      
        try {
            if (!$pr){
                write-host "No PR number found, skipping creating database"
            }
            else{
                Write-Host "Creating database.."
                New-SqlDatabase -Name $dbname `
                    -ResourceGroup rg-sepes-ci `
                    -Server $Env:sqlServerName `
                    -ElasticPool sqlpool-sepes-ci
                }
        }
        catch {
        }

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101   

      # BEGIN UNIT TESTS

    - name: Unit Tests - Restore
      working-directory: src/Sepes.Tests
      run: dotnet restore      

    - name: Unit Tests - Build
      working-directory: src/Sepes.Tests
      run: dotnet build --configuration $config --no-restore
 
    - name: Unit Tests - Set PR build number (if pr)
      id: PRNUMBER
      if: ${{ github.event_name == 'pull_request' }}
      uses: kkak10/pr-number-action@v1.3

    - name: Unit Tests - Set test title
      run: | 
            if ${{ github.event_name == 'pull_request' }}
            then
              echo "title=Unit Test Run for PR #${{steps.PRNUMBER.outputs.pr}} (${{github.run_number}})" >> $GITHUB_ENV
              echo "file_name=TestReport.${{steps.PRNUMBER.outputs.pr}}.${{github.run_number}}.md" >> $GITHUB_ENV
            else
              echo "title=Unit Test Run ${{github.run_number}}" >> $GITHUB_ENV
              echo "file_name=TestReport.${{github.run_number}}.md" >> $GITHUB_ENV

            fi


    - name: Unit Tests - Run and collect coverage
      working-directory: src/Sepes.Tests    
      run: dotnet test --no-restore --no-build --configuration $config --collect:"XPlat Code Coverage" --settings unittests.runsettings --logger:"liquid.md;LogFileName=${{github.workspace}}/${{env.file_name}};Title=${{env.title}};" 


    - name: Unit Tests - Add PR comment
      uses: machine-learning-apps/pr-comment@master
      if: ${{always() && github.event_name == 'pull_request'}}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        path: ${{env.file_name}}     

    - name: Unit Tests - Upload test report as artifact
      uses: actions/upload-artifact@v2
      if: ${{always()}}
      with:
        name: 'Unit Test Run'
        path: ${{github.workspace}}/${{env.file_name}}

    - name: Build unit test coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:src/Sepes.Tests/TestResults/**/coverage.cobertura.xml -targetdir:${{github.workspace}}/CodeCoverage/UnitTests -reporttypes:HtmlSummary -title:"Unit Tests"

    - name: Upload coverage report as build artifact
      uses: actions/upload-artifact@v2
      if: ${{always()}}
      with:
        name: 'Unit Test Coverage Report'
        path: ${{github.workspace}}/CodeCoverage/UnitTests/summary.htm


      # BEGIN INTEGRATION TESTS

    - name: Integration Tests - Restore project
      working-directory: src/Sepes.RestApi.IntegrationTests
      run: dotnet restore   

    - name: Integration Tests - Build
      working-directory: src/Sepes.RestApi.IntegrationTests
      run: dotnet build --configuration $config --no-restore

 
    - name: Integration Tests - Set PR build number (if pr)
      id: PRNUMBER
      if: ${{ github.event_name == 'pull_request' }}
      uses: kkak10/pr-number-action@v1.3

   
    - name: Integration Tests - Set test title
      run: | 
            if ${{ github.event_name == 'pull_request' }}
            then
              echo "title=Integration Test Run for PR #${{steps.PRNUMBER.outputs.pr}} (${{github.run_number}})" >> $GITHUB_ENV
              echo "file_name_int_test=IntegrationTestReport.${{steps.PRNUMBER.outputs.pr}}.${{github.run_number}}.md" >> $GITHUB_ENV
            else
              echo "title=Integration Test Run ${{github.run_number}}" >> $GITHUB_ENV
              echo "file_name_int_test=IntegrationTestReport.${{github.run_number}}.md" >> $GITHUB_ENV

            fi


    - name: Integration Tests - Run and collect coverage
      env: 
        SepesIntegrationTestConnectionString: ${{ secrets.CONNECTION_STRING }}
        DisableMigrations: "true"
        CostAllocationTypeTagName: "INTTEST-CostAllocationType"
        CostAllocationCodeTagName: "INTTEST-CostAllocationCode"
        AllowCorsDomains: "https://182.168.1.1"
      working-directory: src/Sepes.RestApi.IntegrationTests   
      run: dotnet test --no-restore --no-build --configuration $config --collect:"XPlat Code Coverage" --settings integrationtests.runsettings --logger:"liquid.md;LogFileName=${{github.workspace}}/${{env.file_name_int_test}};Title=${{env.title}};" 


    - name: Integration Tests - Add PR comment
      uses: machine-learning-apps/pr-comment@master
      if: ${{always() && github.event_name == 'pull_request'}}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        path: ${{env.file_name_int_test}}     

    - name: Integration Tests - Upload test report as artifact
      uses: actions/upload-artifact@v2
      if: ${{always()}}
      with:
        name: 'Integration Test Run'
        path: ${{github.workspace}}/${{env.file_name_int_test}}


    - name: Integration Tests - Build coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:src/Sepes.RestApi.IntegrationTests/TestResults/**/coverage.cobertura.xml -targetdir:${{github.workspace}}/CodeCoverage/IntegrationTest -reporttypes:HtmlSummary -title:"Integration Tests"


    - name: Integration Tests - Upload coverage report as build artifact
      uses: actions/upload-artifact@v2
      if: ${{always()}}
      with:
        name: 'Interation Test Coverage Report'
        path: ${{github.workspace}}/CodeCoverage/IntegrationTest/summary.htm     

    - name: Combined Tests - Build coverage report
      run: |
        reportgenerator -reports:src/Sepes.Tests/TestResults/**/coverage.cobertura.xml;src/Sepes.RestApi.IntegrationTests/TestResults/**/coverage.cobertura.xml -targetdir:${{github.workspace}}/CodeCoverage/Combined -reporttypes:HtmlSummary -title:"All Tests"


    - name: Combined Tests - Upload coverage report as build artifact
      uses: actions/upload-artifact@v2
      if: ${{always()}}
      with:
        name: 'Combined Test Coverage Report'
        path: ${{github.workspace}}/CodeCoverage/Combined/summary.htm 
   