name: Unit Tests
on:
  pull_request:    
    branches: [ master, develop ]
  push: 
    branches:
      - test/run-integrationtest-in-github
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      config: 'Release'
      azureSubscriptionId: 6cfb8f33-6d4b-43bf-9000-91fd6f53ca28
 
    steps:
    - uses: actions/checkout@v2

    # azure login steps
    - name: azure login
      shell: pwsh
      env:
        clientId: ${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_ID }}
        clientSecret:  ${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_SECRET }}
        tenantId: ${{ secrets.AZURE_TENANT_ID }}
        sqlServerName: ${{ secrets.CI_SQLSERVERNAME }}
      run: |
        az login --service-principal -u $Env:clientId --password "$Env:clientSecret" --tenant $Env:tenantId
        az account set -s ${{ env.azureSubscriptionId }}
        
        $pr = (Get-Content ${env:GITHUB_EVENT_PATH} | ConvertFrom-Json).number
        Write-Host "Pull request: $pr"
        $dbname = "db-sepes-ci-pr$pr"

        # Create new database for PR
        import-module .github/scripts/createdatabase -Force
      
        try {
            Write-Host "Creating database.."
            New-SqlDatabase -Name $dbname `
                -ResourceGroup rg-sepes-ci `
                -Server $Env:sqlServerName `
                -ElasticPool sqlpool-sepes-ci
        }
        catch {
        }

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101   

    - name: Unit Tests - Restore
      working-directory: src/Sepes.Tests
      run: dotnet restore      

    - name: Unit Tests - Build
      working-directory: src/Sepes.Tests
      run: dotnet build --configuration $config --no-restore
 
    - name: Unit Tests - Set PR build number (if pr)
      id: PRNUMBER
      if: ${{ github.event_name == 'pull_request' }}
      uses: kkak10/pr-number-action@v1.3

      # set report file and title 
    - name: Unit Tests - Set test title
      run: | 
            if ${{ github.event_name == 'pull_request' }}
            then
              echo "title=Test Run for PR #${{steps.PRNUMBER.outputs.pr}} (${{github.run_number}})" >> $GITHUB_ENV
              echo "file_name=TestReport.${{steps.PRNUMBER.outputs.pr}}.${{github.run_number}}.md" >> $GITHUB_ENV
            else
              echo "title=Test Run ${{github.run_number}}" >> $GITHUB_ENV
              echo "file_name=TestReport.${{github.run_number}}.md" >> $GITHUB_ENV

            fi

      # run tests with built project
    - name: Unit Tests - Run and collect coverage
      working-directory: src/Sepes.Tests    
      run: dotnet test --no-restore --no-build --configuration $config --collect:"XPlat Code Coverage" --settings unittests.runsettings --logger:"liquid.md;LogFileName=${{github.workspace}}/${{env.file_name}};Title=${{env.title}};" 

    # add report as PR comment (if PR)
    - name: Unit Tests - Add PR comment
      uses: machine-learning-apps/pr-comment@master
      if: ${{always() && github.event_name == 'pull_request'}}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        path: ${{env.file_name}}     

    - name: Unit Tests - Upload test report as artifact
      uses: actions/upload-artifact@v2
      if: ${{always()}}
      with:
        name: 'Test Run'
        path: ${{github.workspace}}/${{env.file_name}}

    - name: Integration Tests - Restore project
      working-directory: src/Sepes.RestApi.IntegrationTests
      run: dotnet restore   

    - name: Integration Tests - Build
      working-directory: src/Sepes.RestApi.IntegrationTests
      run: dotnet build --configuration $config --no-restore

    - name: Integration Tests - Run and collect coverage
      env: 
        SepesIntegrationTestConnectionString: ${{ secrets.CONNECTION_STRING }}
      working-directory: src/Sepes.RestApi.IntegrationTests   
      run: dotnet test --no-restore --no-build --configuration $config --collect:"XPlat Code Coverage" --settings integrationtests.runsettings 

    # generate coverage report
    - name: Build coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:src/Sepes.Tests/TestResults/**/coverage.cobertura.xml;src/Sepes.RestApi.IntegrationTests/TestResults/**/coverage.cobertura.xml -targetdir:${{github.workspace}}/CodeCoverage -reporttypes:HtmlSummary

    # upload code coverage report as build artifact
    - name: Upload coverage report as build artifact
      uses: actions/upload-artifact@v2
      if: ${{always()}}
      with:
        name: 'Code Coverage Report'
        path: ${{github.workspace}}/CodeCoverage/summary.htm     
   