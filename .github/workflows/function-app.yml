name: function app
on:
  repository_dispatch:
  pull_request:
    branches: 
      - master
      - develop
    paths:
      - src/Sepes.Functions/*
      - .github/workflows/function-app.yml
  push:
    paths:
      - src/Sepes.Functions/*
      - .github/workflows/function-app.yml
env:
  ciTag: ${{ secrets.ACR_URL }}/function-app/ci
  prodTag: ${{ secrets.ACR_URL }}/function-app/prod
  acr: ${{ secrets.ACR_URL }}/

jobs:
  dockerbuild:
    runs-on: ubuntu-latest
    env:
        environment: CI
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Docker login
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_URL }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Builds the function app
      - name: docker build
        run: |
          docker build src -f src/Sepes.Functions/Dockerfile -t ${{ env.ciTag }}:$GITHUB_RUN_ID -t ${{ env.ciTag }}:latest
          docker push ${{ env.ciTag }}

  prod:
    if: github.ref == 'refs/heads/functionrun'
    runs-on: ubuntu-latest
    env:
        environment: prod
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Docker login
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_URL }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Builds the function app
      - name: docker build
        run: |
          docker build src -f src/Sepes.Functions/Dockerfile -t ${{ env.acr }}${{ env.environment }}:$GITHUB_RUN_ID -t ${{ env.acr }}${{ env.environment }}:latest
          docker push ${{ env.acr }}${{ env.environment }}

      # - uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - run: |
      #     az webapp list --query "[?state=='Running']"

      - name: Azure login
        shell: pwsh
        run: |
          # Install-Module -Name Az -AllowClobber -Scope CurrentUser -Force
          # $azureAplicationId = "${{ secrets.PROD_AZURE_CREDENTIALS_CLIENT_ID }}"
          $azureTenantId = "${{ secrets.AZURE_TENANT_ID }}"
          # $azurePassword = ConvertTo-SecureString "${{ secrets.PROD_AZURE_CREDENTIALS_CLIENT_SECRET }}" -AsPlainText -Force
          # $psCred = New-Object System.Management.Automation.PSCredential($azureAplicationId , $azurePassword)
          # #Add-azAccount -Credential $psCred -TenantId $azureTenantId -
          az login --service-principal -u ${{ secrets.PROD_AZURE_CREDENTIALS_CLIENT_ID }} --password "{{ secrets.PROD_AZURE_CREDENTIALS_CLIENT_SECRET }}" --tenant $azureTenantId
          az account show